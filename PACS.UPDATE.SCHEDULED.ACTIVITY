SUBROUTINE PACS.UPDATE.SCHEDULED.ACTIVITY
*===================================================================================================================

*Author Mahesh Kumar Velan
* this rouitne will read the AA.SCHEDULED.ACTIVITY record and remove the #@# activities 
* update the NEXT.RUN.DATE Field with correct values
* forms the string reqiured to run PACS.TRIGGER.ACTIVITY
* SAVEDLIST input Arrangement ID

*===================================================================================================================
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.AA.INTEREST.ACCRUALS
    $INSERT I_F.AA.SCHEDULED.ACTIVITY
    $INSERT I_F.AA.PAYMENT.SCHEDULE


    GOSUB OPEN.FILES
    GOSUB REMOVE.ACTIVITY
    GOSUB WRITE.SL
    CALL JOURNAL.UPDATE('')

    RETURN

OPEN.FILES:

    FN.AA.ARRANGEMENT = 'F.AA.ARRANGEMENT'
    F.AA.ARRANGEMENT = ''
    CALL OPF(FN.AA.ARRANGEMENT, F.AA.ARRANGEMENT)

    FN.AA.INTEREST.ACCRUALS = 'F.AA.INTEREST.ACCRUALS'
    F.AA.INTEREST.ACCRUALS = ''
    CALL OPF(FN.AA.INTEREST.ACCRUALS, F.AA.INTEREST.ACCRUALS)

    FN.AA.SCHEDULED.ACTIVITY = 'F.AA.SCHEDULED.ACTIVITY'
    F.AA.SCHEDULED.ACTIVITY = ''
    CALL OPF(FN.AA.SCHEDULED.ACTIVITY, F.AA.SCHEDULED.ACTIVITY)

    FN.SAVEDLIST = '&SAVEDLISTS&'
    F.SAVEDLIST = ''
    CALL OPF(FN.SAVEDLIST, F.SAVEDLIST)

    SL.ID = 'UPDATE.SCHEDULE'

    OUTPUT<-1> = "Arrangement#NextRunDate"

    RETURN

REMOVE.ACTIVITY:

    CALL F.READ(FN.SAVEDLIST, SL.ID, R.SL,F.SAVEDLIST, SL.ERR)

    ARRANGEMENT.COUNT = DCOUNT(R.SL, FM)

    FOR VAL = 1 TO ARRANGEMENT.COUNT
	 
        ARRANGEMENT.ID = R.SL<VAL>
		CRT "Processing Arrangement :":ARRANGEMENT.ID
        CALL F.READ(FN.AA.SCHEDULED.ACTIVITY, ARRANGEMENT.ID, R.SCHEDULED.ACTIVITY,F.AA.SCHEDULED.ACTIVITY, SCH.ERR)

        IF NOT(SCH.ERR) THEN

            ACTIVITY.COUNT = DCOUNT(R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME>, VM)

            FOR IDX = ACTIVITY.COUNT TO 1 STEP -1

                FINDSTR "#@#" IN R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME, IDX> SETTING ACT.POS THEN
					
					ACT.POS = IDX
                    GOSUB DELETE.MISSING.ACTIVITY

                END

            NEXT IDX

            ACTIVITY.COUNT = DCOUNT(R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME>, VM)

            *FOR ACT.CNT = 1 TO ACTIVITY.COUNT
			*
            *    IF R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME, ACT.CNT> EQ 'DEPOSITS-CANCEL-ARRANGEMENT' THEN
			*
            *        DEL.POS = ACT.CNT
            *        GOSUB DELETE.ACTIVITY
			*
            *    END
            *NEXT ACT.CNT

            NEXT.DATE.COUNT = DCOUNT(R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.DATE>, VM)

            FOR NEXT.CNT = 1 TO NEXT.DATE.COUNT
				
				IF R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.DATE, NEXT.CNT> NE '' THEN

					NEXT.DATE.LIST<-1> = R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.DATE, NEXT.CNT>
					
				END

            NEXT NEXT.CNT

			NEXT.DATE.LIST = SORT(NEXT.DATE.LIST)

        END
		R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.RUN.DATE> = NEXT.DATE.LIST<1>
        CALL F.WRITE(FN.AA.SCHEDULED.ACTIVITY, ARRANGEMENT.ID, R.SCHEDULED.ACTIVITY)	
		NEXT.DATE.LIST = ''
		EFF.DATE = R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.RUN.DATE>
		IF EFF.DATE AND EFF.DATE LT TODAY THEN
			CALL CDT("", EFF.DATE, "-1C")
			
			CALL F.READ(FN.AA.ARRANGEMENT, ARRANGEMENT.ID, R.ARR, F.AA.ARRANGEMENT, ERR)
			
			PRODUCT.LINE= R.ARR<AA.ARR.PRODUCT.LINE>
	
			CORR.STR<-1> = PRODUCT.LINE:"-CHANGE-SCHEDULE":"#":EFF.DATE:"#":ARRANGEMENT.ID:"##":"I":"##":
		END
CALL JOURNAL.UPDATE('')
    NEXT VAL

    RETURN

*DELETE.ACTIVITY:
*	
*    DEL R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME, DEL.POS>
*    DEL R.SCHEDULED.ACTIVITY<AA.SCH.LAST.DATE, DEL.POS>
*    DEL R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.DATE, DEL.POS>
*
*RETURN

DELETE.MISSING.ACTIVITY:

    DEL R.SCHEDULED.ACTIVITY<AA.SCH.ACTIVITY.NAME, ACT.POS>
    DEL R.SCHEDULED.ACTIVITY<AA.SCH.LAST.DATE, ACT.POS>
    DEL R.SCHEDULED.ACTIVITY<AA.SCH.NEXT.DATE, ACT.POS>

RETURN

WRITE.SL:

    CALL F.WRITE(FN.SAVEDLIST, 'SL.ACT', CORR.STR)
	CALL JOURNAL.UPDATE("")

RETURN
END
